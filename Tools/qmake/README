
The global config of QtWebKit
=============================

The goal of changes of build system of QtWebKit is full control
of options and modules of QtWebKit, which are included in build process.
And location of all options in one place.
Also include in QtWebKit only those blocks, which are needed.

In Tools/qmake/mkspecs/features added files
cfg_config.prf (functions) and cfg_config.pri (options).

In end of default_post.prf there are messages of debug warnings.
For switch on these messages insert variable CFG_DEBUG_WARNING=ON in file,
which want to control (WebKit.pro, WebCore.pro ...):

CFG_DEBUG_WARNING = ON


Folder '.git' must be at least empty in root of module.


TODO:
-----

1. Turn on commented
contains(CFG_FEATURE_DEFAULTS, ENABLE_ICONDATABASE=1)|contains(CFG_FEATURE_DEFAULTS, ENABLE_SQL_DATABASE=1)|contains(CFG_FEATURE_DEFAULTS, ENABLE_SHARED_WORKERS=1)|contains(CFG_FEATURE_DEFAULTS, ENABLE_WORKERS=1) {
    CFG_FEATURE_DEFAULTS -= ENABLE_CFG_SQLITE3=0
    CFG_FEATURE_DEFAULTS += ENABLE_CFG_SQLITE3=1
#} else {
#    CFG_FEATURE_DEFAULTS -= ENABLE_CFG_SQLITE3=1
#    CFG_FEATURE_DEFAULTS += ENABLE_CFG_SQLITE3=0
}

2. Turn off these:
ENABLE_CFG_ACCESSIBILITY=1 \  # =1
ENABLE_CFG_APPCACHE=1 \  # =1
ENABLE_CFG_ARCHIVE=1 \  # =1
ENABLE_CFG_CACHE=1 \  # =1
ENABLE_CFG_FILTERS=1 \  # =1
ENABLE_CFG_HISTORY=1 \  # =1
ENABLE_CFG_ICON=1 \  # =1
ENABLE_CFG_LEVELDB=1 \  # =1  # WebCore
ENABLE_CFG_NETWORK=1 \  # =1
ENABLE_CFG_PLUGINS=1 \  # =1
ENABLE_CFG_SQLITE3=1 \  # =1
ENABLE_CFG_STORAGE=1 \  # =1
ENABLE_CFG_TRANSFORMS=1 \  # =1

3. Work with
# compile errors
#    QT_NO_ACTION=0 \  # =0  # WebKit
# run errors
#    QT_NO_CONTEXTMENU=0 \  # =0  # WebKit
#    QT_NO_MENU=0 \  # =0  # WebKit
#    QT_NO_WHEELEVENT=0 \  # =0  # WebKit, DumpRenderTree
# run with problems
#    QT_NO_DRAGANDDROP=0 \  # =0  # WebKit

4. Remove using of CFG_BUILD_TEXTURE_MAPPER

5. New options for SOURCES and HEADERS in *.pr*
(css, dom, editing, fileapi, html, loader, page, platform, rendering, testing, xml,  ...)



=== The original description ===


The qmake build system
======================

Basic structure
---------------

The qmake build is split into three different file types:

    * .pro files: These files represent top level targets that can be
    built individually, or a collection of sub-targets used for
    organizing the project.

    * .pri files: These files are included from top level targets,
    and represent 'implementation details' of how the target is built.

    * .prf files: These files take care of generic build rules
    that applies to all targets, or specific 'features' that can
    be loaded on demand.

The first two file types are spread throughout the source tree, while
the .prf files are located in 'Tools/qmake/mkspecs/features' and will
get loaded by qmake based on setting the QMAKEPATH environment variable.


Root project file
-----------------

The root project file 'WebKit.pro' is handy both for loading WebKit
in Qt Creator, and for building QtWebKit. Normally you will build
using build-webkit, but you can also run qmake directly on the root
project file. Just make sure to set QMAKEPATH first, so that the
custom mkspecs are picked up.

Feature files
-------------

Feature files (.prf files) are used in the following ways:

    1. Every time qmake parses a project file, it will first load
    a special feature file called 'defaults_pre.prf', then parse
    the project file, and then load another special feature file
    called 'defaults_post.prf'. We use these special files to set
    default options that all project files use, expose a few handy
    functions, and to post-process the build config based on what
    the project file did.

    2. Dependencies on other targets (libraries) are declared by
    using CONFIG+=othertarget. This will add the correct include
    paths and linker options to use the library.

    3. Optional features can be enabled by passing CONFIG+=foo on
    the command line when running qmake on the root project file,
    (or by passing --make-args="CONFIG+=foo" to build-webkit). For
    example 'CONFIG+=valgrind'.


Derived sources
---------------

Some targets (JavaScriptCore, WebCore, etc) rely on generated files,
(aka. derived sources). These must be generated before the real target
is built. This is achieved by splitting the target up into two sub-
projects, one for the derived sources and one for the real target,
and telling qmake to build them in order using CONFIG += ordered.


The WEBKIT variable
-------------------

The custom qmake variable 'WEBKIT' is used for signaling that a
target depends in some way on other subproject of the WebKit
project. For now this is limited to the set of intermediate
libraries: wtf, javascriptcore, webcore, and webkit2.

Adding a dependency results in additional include paths being
available, and potentially linking to the library. This is
decided by the build system based on conditions such as what
kind of target is being built and the general build config.
