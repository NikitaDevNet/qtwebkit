# -------------------------------------------------------------------
# Global 'configure' file for WebKit.
# For options see cfg_config.pri
# Defines of conditions 'cfg_*'.
#
# See 'Tools/qmake/README' for an overview of the build system
# -------------------------------------------------------------------

include(cfg_config.pri)

defineTest(dwarning) {

    contains(CFG_DEBUG_WARNING, ON) {
        warning($${EOL})
        warning(=========== DEBUG WARNING ==========$${EOL})
        warning($${EOL})

        warning("  $$1")

        for(item, 2) {
            warning("      $$item")
        }

        warning($${EOL})
        warning(------- END OF DEBUG WARNING -------$${EOL})
        warning($${EOL})
        warning($${EOL})
    }
}

defineTest(cfg_warning_file_in) {

#    contains(CFG_DEBUG_WARNING, ON) {
        warning($${EOL})
        warning(=========== ENTERING $$1 ==========$${EOL})
        warning($${EOL})

#    }
}

defineTest(cfg_warning_file_out) {

#    contains(CFG_DEBUG_WARNING, ON) {
        warning($${EOL})
        warning(=========== LAEVING $$1 ==========$${EOL})
        warning($${EOL})

#    }
}


defineTest(cfg_build?) {
    warning(=== cfg_build?($$1) ===$${EOL})
    contains(CFG_BUILD_FEATURES, CFG_BUILD_$$upper($$1)=1): return(true)
    return(false)
}

defineTest(cfg_have?) {
    warning(=== cfg_have?($$1) ===$${EOL})
    contains(CFG_FEATURE_DEFAULTS, HAVE_$$upper($$1)=1): return(true)
    return(false)
}

defineTest(cfg_use?) {
    warning(=== cfg_use?($$1) ===$${EOL})
    contains(CFG_FEATURE_DEFAULTS, USE_$$upper($$1)=1): return(true)
    return(false)
}

defineTest(cfg_enable?) {
    warning(=== cfg_enable?($$1) ===$${EOL})
    contains(CFG_FEATURE_DEFAULTS, ENABLE_$$upper($$1)=1): return(true)
    return(false)
}

defineReplace(cfgMinimalQtDefines) {
    unset(cfg_defines)

    for(cfg_define, CFG_MINIMAL_QT_DEFINES) {
        enabledFeature = $$find(cfg_define, =1$)
        isEmpty(enabledFeature): next()

        enabledFeature ~= s/=1$//
        cfg_defines += $$enabledFeature
    }

    return($$cfg_defines)
}
