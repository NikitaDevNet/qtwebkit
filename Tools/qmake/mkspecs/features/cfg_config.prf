# -------------------------------------------------------------------
# Global 'configure' file for WebKit.
# For options see cfg_config.pri
# Defines of conditions 'cfg_*'.
#
# See 'Tools/qmake/README' for an overview of the build system
# -------------------------------------------------------------------

include(cfg_config.pri)

defineTest(dwarning) {
# Comment this for disable debug warnings.
    warning($$1)
}

defineTest(runCfgConfig) {
    for(feature, CFG_FEATURES) {
        enabledFeature = $$find(feature, =1$)
        !isEmpty(enabledFeature) {
            enabledFeature ~= s/=1$//
            enabledFeature ~= s/^CFG_ENABLE_//
            CFG_CONFIG += cfg_$$lower($$enabledFeature)
        }
    }
    dwarning(CFG_CONFIG = $$CFG_CONFIG)

    export(CFG_CONFIG)
}

defineTest(cfg_build?) {
    contains(CFG_CONFIG, cfg_build_$$lower($$1)): return(true)
    return(false)
}

defineTest(cfg_have?) {
    contains(CFG_CONFIG, cfg_have_$$lower($$1)): return(true)
    return(false)
}

defineTest(cfg_use?) {
    contains(CFG_CONFIG, cfg_use_$$lower($$1)): return(true)
    return(false)
}

defineTest(cfg_enable?) {
    contains(CFG_CONFIG, cfg_$$lower($$1)): return(true)
    return(false)
}

defineReplace(cfgDefines) {
    unset(cfg_defines)

    for(cfg_define, CFG_DEFAULT_DEFINES) {
        enabledFeature = $$find(cfg_define, =1$)
        isEmpty(enabledFeature): next()

        enabledFeature ~= s/=1$//
        cfg_defines += $$enabledFeature
    }

    return($$cfg_defines)
}
